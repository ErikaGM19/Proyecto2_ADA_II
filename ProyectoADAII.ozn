output ["\"output\": {","\"dzn\": ",showJSON(concat(["x = \n",let {array [int] of string: X_INTRODUCED_87_ = [], array [int] of string: X_INTRODUCED_88_ = [], array [int,int] of string: X_INTRODUCED_89_ = [(X_INTRODUCED_85_, X_INTRODUCED_86_) : showDzn(x[X_INTRODUCED_85_,X_INTRODUCED_86_]) | X_INTRODUCED_85_ in index_set_1of2(x), X_INTRODUCED_86_ in index_set_2of2(x)]} in (show2d_indexed(X_INTRODUCED_87_,X_INTRODUCED_88_,X_INTRODUCED_89_)),";\n","y = ",showDzn(y),";\n","cumulative_p = ",showDzn(cumulative_p),";\n","median_index = ",showDzn(median_index),";\n","abs_diff = ",showDzn(abs_diff),";\n","_objective = ",showDzn(_objective),";\n"])),"}, \"sections\": [\"dzn\"]"];
int: m = 3;
array [1..m] of int: p = [6,3,1];
array [1..m] of float: abs_diff;
float: polarization = sum([int2float(p[i])*abs_diff[i] | i in 1..m]);
float: _objective = polarization;
int: median_index = 1;
array [1..m] of int: cumulative_p = [6,9,10];
array [1..m] of bool: y;
array [1..9] of int: X_INTRODUCED_0_;
array [1..m,1..m] of int: x = array2d(1..3,1..3,X_INTRODUCED_0_);
